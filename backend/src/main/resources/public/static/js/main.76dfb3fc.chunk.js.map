{"version":3,"sources":["api.ts","components/CourseForm/courseForm.tsx","serviceWorker.js","components/home/coursesTable.tsx","components/UpdateForm/updateForm.tsx","index.js"],"names":["baseUrl","createCourse","course","init","method","headers","Content-Type","body","JSON","stringify","fetch","updateCourse","url","concat","courseForm","state","fields","name","description","platform","link","id","showPassword","errors","isNew","isEditing","isCreating","isDeleteModalOpen","redirect","_this","setState","handleResponse","response","status","Error","json","setCourse","mapCourse","Object","objectSpread","handleChange","prop","event","defineProperty","target","value","handleSubmit","validateAll","then","reduce","keys","map","field","isValid","validate","checkBooleans","acc","elem","validateLink","test","getHeader","renderTitle","react","className","Button","variant","color","this","_this$state","react_router","to","CircularProgress","Container","component","maxWidth","CssBaseline","Grid","container","direction","item","Card","CardHeader","title","CardContent","TextField","margin","required","fullWidth","label","error","onChange","CardActions","onClick","React","withRouter","Boolean","window","location","hostname","match","styles","require","coursesTable","courses","receiveCourses","_this2","Typography","TableHead","TableRow","TableCell","TableBody","row","key","IconButton","handleEditCourse","Icon","updateForm","console","log","obtainCourseAndSetState","deleteButtonDiv","props","params","getCourse","course2","catch","NewCourse","FormControl","InputLabel","htmlFor","Input","placeholder","buttonContainer","ReactDOM","render","react_default","a","createElement","react_router_dom","path","Home","CourseForm","UpdateForm","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76dfb3fc.chunk.js","sourcesContent":["export const baseUrl = 'http://localhost:4326/api';\n\n// @ts-ignore\nexport const createCourse = (course: ICourse): Promise<Response> => {\n    const url = baseUrl + '/course';\n    const init: RequestInit = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(course),\n    };\n\n    return fetch(url, init);\n};\n\n// @ts-ignore\nexport const updateCourse = (course: ICourse): Promise<Response> => {\n    const url = `${baseUrl}/course`;\n    const init: RequestInit = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(course),\n    };\n\n    return fetch(url, init);\n};\n\nexport const getCourse = (id: string): Promise<Response> => {\n    const url = `${baseUrl}/course/${id}`;\n    const init: RequestInit = {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n    return fetch(url, init);\n};\n\nexport const getCourses = (): Promise<Response> => {\n    const url = baseUrl + '/course';\n    const init: RequestInit = {\n        method: 'GET',\n    };\n\n    return fetch(url, init);\n};\n","import * as React from 'react';\nimport {Redirect, withRouter} from \"react-router\";\nimport {IProps, IState} from \"./types\";\nimport {createCourse, updateCourse} from \"../../api\";\nimport {\n    Button,\n    CircularProgress,\n} from '@material-ui/core';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport {IErrors} from \"../UpdateForm/types\";\n\nclass courseForm extends React.Component<IProps, IState> {\n\n    state: IState = {\n        fields: {\n            name: '',\n            description: '',\n            platform: '',\n            link: '',\n            id: '',\n        },\n        showPassword: false,\n        errors: {\n            name: false,\n            description: false,\n            platform: false,\n            link: false,\n        },\n        isNew: true,\n        isEditing: true,\n        isCreating: false,\n        isDeleteModalOpen: false,\n    };\n\n    componentDidMount() {\n        this.setState({isNew: true});\n    }\n\n    redirect = () => {\n        this.setState({redirect: '/'});\n    };\n\n    handleResponse = (response: Response): Promise<ICourse> => {\n        if (response.status === 404) {\n            throw Error('Course not created');\n        }\n\n        return response.json();\n    };\n\n    setCourse = (course: ICourse) => {\n        this.setState({\n            fields: course,\n            isNew: false,\n            isEditing: false\n        });\n        this.mapCourse();\n    };\n\n    mapCourse = () => {\n        const {course} = this.state;\n\n        if (!course) {\n            return;\n        }\n\n        const {name, description, id, platform, link} = course;\n        this.setState({\n            ...this.state,\n            fields: {\n                ...this.state.fields,\n                name,\n                description,\n                platform,\n                link,\n                id,\n            },\n        });\n    };\n\n    handleChange = (prop: string) => (event: any) => {\n        this.setState({\n            ...this.state,\n            fields: {\n                ...this.state.fields,\n                [prop]: event.target.value,\n            },\n        });\n    };\n\n    handleSubmit = () => {\n        if(this.validateAll()){\n            if (!this.state.isNew) {\n                updateCourse(this.state.fields).then(() => this.setState({redirect: '/'}));\n            } else {\n                createCourse(this.state.fields).then(() => this.setState({redirect: '/home'}));\n            }\n        }\n    };\n\n    validateAll = () => {\n        const errors: IErrors = {};\n\n        /* Validate all fields and set errors */\n        const results: boolean[] = Object.keys(this.state.fields).map((field) => {\n            const isValid = this.validate(field, this.state.fields[field]);\n            errors[field] = !isValid;\n            return isValid;\n        });\n        const reduce = results.reduce(this.checkBooleans, true);\n        /* Update error state */\n        this.setState({\n            ...this.state,\n            errors: errors,\n        });\n        return reduce;\n    };\n\n    checkBooleans = (acc: boolean, elem: boolean) => {\n        return acc && elem\n    };\n\n    validate = (field: string, value: any): boolean => {\n        if (field === 'link') {\n            return (\n                this.validateLink(value)\n            );\n        } else {\n            return true;\n        }\n    };\n\n    validateLink = (value: any): boolean => {\n        const regexp =  /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n        if (regexp.test(value)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    getHeader = () => {\n        if (this.state.isNew) {\n            return 'Create course';\n        } else {\n            return 'Edit course';\n        }\n    };\n\n    renderTitle = () => {\n        const {isNew} = this.state;\n        return <div>\n            {\n                !isNew &&\n                <div className={'delete-button'}>\n                    <Button\n                        variant='contained'\n                        color='secondary'\n                    >\n                        Delete\n                    </Button>\n                </div>\n            }\n        </div>\n    };\n\n    render() {\n        const {fields, errors, isCreating, redirect} = this.state;\n\n        if (redirect) {\n            return <Redirect to={redirect}/>;\n        }\n\n        if (isCreating) {\n            return <div><CircularProgress/></div>\n        }\n\n        return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline/>\n                <div className={'paper center-content'}>\n                    <Grid container direction={'row'}>\n                        <Grid item direction={'column'}>\n                        </Grid>\n                        <Grid item direction={'column'}>\n                            <Card className={'new-course'}>\n                                <Grid container>\n                                    <Grid item direction={'row'}>\n                                        <CardHeader className={'center-content'} title={this.getHeader()} />\n                                    </Grid>\n                                    <Grid item direction={'row'}>\n                                        <CardContent>\n                                            <form className={'form'}>\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    required\n                                                    fullWidth\n                                                    label=\"Name\"\n                                                    name=\"name\"\n                                                    id='course-name'\n                                                    value={fields.name}\n                                                    error={errors.name}\n                                                    onChange={this.handleChange('name')}\n                                                />\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    required\n                                                    fullWidth\n                                                    label=\"Description\"\n                                                    name=\"description\"\n                                                    id='course-description'\n                                                    value={fields.description}\n                                                    error={errors.description}\n                                                    onChange={this.handleChange('description')}\n                                                />\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    required\n                                                    fullWidth\n                                                    label=\"Platform\"\n                                                    name=\"platform\"\n                                                    id='course-platform'\n                                                    value={fields.platform}\n                                                    error={errors.platform}\n                                                    onChange={this.handleChange('platform')}\n                                                />\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    margin=\"normal\"\n                                                    required\n                                                    fullWidth\n                                                    label=\"Link\"\n                                                    name=\"link\"\n                                                    id='course-link'\n                                                    value={fields.link}\n                                                    error={errors.link}\n                                                    onChange={this.handleChange('link')}\n                                                />\n                                            </form>\n                                        </CardContent>\n                                    </Grid>\n                                    <Grid item direction={'row'}>\n                                        <CardActions>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                id='submit-button'\n                                                className={'save-button'}\n                                                onClick={this.handleSubmit}\n                                            >\n                                                Save\n                                            </Button>\n                                        </CardActions>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item direction={'column'}>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default withRouter(courseForm);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport {Redirect, withRouter} from \"react-router\";\nimport {IProps, IStateHome} from \"../UpdateForm/types\";\nimport {getCourses} from \"../../api\";\nimport {TableHead} from \"@material-ui/core\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Typography from \"@material-ui/core/Typography\";\nconst styles = require('./courseTable.css');\n\nclass coursesTable extends React.Component<IProps, IStateHome> {\n\n    state: IStateHome = {\n        courses: [],\n    };\n\n    componentDidMount() {\n        getCourses().then(this.handleResponse).then(this.receiveCourses);\n    }\n\n    handleResponse = (response: Response): Promise<ICourse[]> => {\n        if (response.status !== 200) {\n            throw Error('Error fetching admins');\n        }\n\n        return response.json();\n    };\n\n    receiveCourses = (courses: ICourse[]) => {\n        this.setState({courses})\n    };\n\n    private handleEditCourse(id: string) {\n        this.setState({redirect: '/update/' + id});\n    }\n\n    render() {\n        const{courses, redirect} = this.state;\n\n        if (redirect) {\n            return <Redirect to={redirect}/>;\n        }\n\n        return(\n            <div className={'paper'}>\n                <Typography className={styles['Table-title']} color='textPrimary'>{\n                    `Home`\n                }</Typography>\n\n                <Typography className={styles['Table-title']} color='textPrimary'>{\n                    `Courses table`\n                }</Typography>\n\n                <table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell>Platform</TableCell>\n                            <TableCell>Link</TableCell>\n                            <TableCell/>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {\n                            courses.map(row => {\n                                return (\n                                    <TableRow key={row.id}>\n                                        <TableCell>{row.name}</TableCell>\n                                        <TableCell>{row.platform}</TableCell>\n                                        <TableCell>{row.link}</TableCell>\n                                        <TableCell>\n                                            {/*<Link to={`/admin/${row.id}`}>*/}\n                                            {/*    <IconButton>*/}\n                                            {/*        <Edit/>*/}\n                                            {/*    </IconButton>*/}\n                                            {/*</Link>*/}\n\n                                            <IconButton onClick={() => this.handleEditCourse(row.id)}><Icon>edit_icon</Icon></IconButton>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })\n                        }\n\n                    </TableBody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(coursesTable);\n","import * as React from 'react';\nimport {Redirect, withRouter} from \"react-router\";\nimport {IErrors, IProps, IState} from \"./types\";\nimport { getCourse, updateCourse} from \"../../api\";\nimport {\n    Button,\n    CircularProgress,\n    Typography,\n    Card,\n    // CardHeader,\n    CardContent,\n    FormControl,\n    Input,\n    InputLabel,\n    CardActions,\n} from '@material-ui/core';\n\nconst styles = require('./updateForm.css');\n\n\nclass updateForm extends React.Component<IProps, IState> {\n\n    state: IState = {\n        fields: {\n            name: '',\n            description: '',\n            platform: '',\n            link: '',\n            id: '',\n        },\n        showPassword: false,\n        errors: {\n            name: false,\n            description: false,\n            platform: false,\n            link: false,\n        },\n        isNew: false,\n        isEditing: true,\n        isCreating: false,\n        isDeleteModalOpen: false,\n    };\n\n    componentDidMount() {\n        const {match} = this.props;\n\n        if (match.params.id) {\n            this.obtainCourseAndSetState(match.params.id)\n        }\n    }\n\n    redirect = () => {\n        this.setState({redirect: '/'});\n    };\n\n    handleResponse = (response: Response): Promise<ICourse> => {\n        if (response.status === 404) {\n            throw Error('Course not created');\n        }\n\n        return response.json();\n    };\n\n    setCourse = (course: ICourse) => {\n        this.setState({\n            fields: course,\n            isNew: false,\n            isEditing: false\n        });\n        this.mapCourse();\n    };\n\n    mapCourse = () => {\n        const {course} = this.state;\n\n        if (!course) {\n            return;\n        }\n\n        const {name, description, id, platform, link} = course;\n        this.setState({\n            ...this.state,\n            fields: {\n                ...this.state.fields,\n                name,\n                description,\n                platform,\n                link,\n                id,\n            },\n        });\n    };\n\n    handleChange = (prop: string) => (event: any) => {\n\n        if (prop === 'id') {\n            console.log(event.target.value);\n            console.log(prop);\n            this.obtainCourseAndSetState(event.target.value)\n        }\n        this.setState({\n            ...this.state,\n            fields: {\n                ...this.state.fields,\n                [prop]: event.target.value,\n            },\n        });\n    };\n\n    obtainCourseAndSetState(id: number){\n        // @ts-ignore\n        getCourse(id).then((course) => {\n            const promise = course.json();\n            promise.then((course2: ICourse) => {\n\n                this.setState({\n                    ...this.state,\n                    fields: {\n                        ...this.state.fields,\n                        name: course2.name,\n                        description: course2.description,\n                        platform: course2.platform,\n                        link: course2.link,\n                        id: course2.id\n                    }\n                })\n                // console.log(course2);\n            })\n                .catch(() => {\n                    console.log('not found')\n                });\n\n        });\n    }\n\n    handleSubmit = () => {\n        if (this.validateAll()) {\n            updateCourse(this.state.fields).then(() => this.setState({redirect: '/home'}));\n        }\n    };\n\n    validateAll = () => {\n        const errors: IErrors = {};\n\n        /* Validate all fields and set errors */\n        const results: boolean[] = Object.keys(this.state.fields).map((field) => {\n            const isValid = this.validate(field, this.state.fields[field]);\n            errors[field] = !isValid;\n            return isValid;\n        });\n        const reduce = results.reduce(this.checkBooleans, true);\n        /* Update error state */\n        this.setState({\n            ...this.state,\n            errors: errors,\n        });\n        return reduce;\n    };\n\n    checkBooleans = (acc: boolean, elem: boolean) => {\n        return acc && elem\n    };\n\n    validate = (field: string, value: any): boolean => {\n        if (field === 'link') {\n            return (\n                this.validateLink(value)\n            );\n        } else {\n            return true;\n        }\n    };\n\n    validateLink = (value: any): boolean => {\n        const regexp =  /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n        if (regexp.test(value)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n\n    getHeader = () => {\n        if (this.state.isNew) {\n            return 'Create course';\n        } else {\n            return 'Edit course';\n        }\n    };\n\n    renderTitle = () => {\n        const {isNew} = this.state;\n        return <div>\n            {\n                !isNew &&\n                <div className={styles.deleteButtonDiv}>\n                    <Button\n                        variant='contained'\n                        color='secondary'\n                    >\n                        DELETE\n                    </Button>\n                </div>\n            }\n        </div>\n    };\n\n    render() {\n        const {fields, errors, isCreating, redirect} = this.state;\n\n        if (redirect) {\n            return <Redirect to={redirect}/>;\n        }\n\n        if (isCreating) {\n            return <div><CircularProgress/></div>\n        }\n\n        return (\n            <div className={styles.NewCourse}>\n                <Typography className={styles['New-course-title']} color='textSecondary'>\n\n                       Edit course\n\n                </Typography>\n                <Card className={styles['New-course-box']}>\n                    {/*<CardHeader title={this.renderTitle()} className={styles.displayName}/>*/}\n                    <CardContent>\n                        <form className={styles['New-course-form']}>\n\n                            <FormControl className={styles['course-form-control']} error={errors.name}>\n                                <InputLabel required htmlFor='admin-name'>Name</InputLabel>\n                                <Input id='course-name'\n                                       value={fields.name}\n                                       onChange={this.handleChange('name')}\n                                       placeholder={'previousName'}\n                                />\n                            </FormControl>\n                            <FormControl className={styles['course-form-control']} error={errors.description}>\n                                <InputLabel required htmlFor='course-description'>Description</InputLabel>\n                                <Input id='course-description'\n                                       value={fields.description}\n                                       onChange={this.handleChange('description')}\n                                />\n                            </FormControl>\n                            <FormControl className={styles['course-form-control']} error={errors.platform}>\n                                <InputLabel required htmlFor='course-platform'>Platform</InputLabel>\n                                <Input id='course-platform'\n                                       value={fields.platform}\n                                       onChange={this.handleChange('platform')}\n                                />\n                            </FormControl>\n                            <FormControl className={styles['course-form-control']} error={errors.link}>\n                                <InputLabel required htmlFor='course-link'>Link</InputLabel>\n                                <Input id='course-link'\n                                       value={fields.link}\n                                       onChange={this.handleChange('link')}\n                                />\n                            </FormControl>\n                        </form>\n                    </CardContent>\n\n                    <CardActions>\n                        <div className={styles.buttonContainer}>\n                            {\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    className={styles['create-admin-button']}\n                                    onClick={this.handleSubmit}\n                                >\n                                    SAVE\n                                </Button>\n                            }\n                        </div>\n                    </CardActions>\n\n                </Card>\n            </div>\n\n        );\n    }\n}\n\nexport default withRouter(updateForm);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CourseForm from './components/CourseForm/courseForm.tsx'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Home from \"./components/home/coursesTable\";\nimport {Route} from \"react-router\";\nimport UpdateForm from \"./components/UpdateForm/updateForm\";\n\n\nconst App = () => {\n    return (\n        <Router>\n            <Route path=\"/home\" component={Home} />\n            <Route path=\"/course\" component={CourseForm} />\n            <Route path=\"/update/:id\" component={UpdateForm} />\n        </Router>)\n};\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}